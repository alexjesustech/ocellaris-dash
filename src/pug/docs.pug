extends layouts/_layout.pug

block variables
	- var activePage = 'docs';
	- var activeGroup = 'none';

block title
	title Documentation - Ocellaris Dash

block content
	.app-title
		div
			h1
				i.bi.bi-code-square
				|  Documentation
			p Documentation of vali admin

		ul.app-breadcrumb.breadcrumb
			li.breadcrumb-item
				i.bi.bi-house-door.fs-6
			li.breadcrumb-item
				a(href='#') Documentation


	.tile
		.tile-body
			.docs(style="max-width: 700px;")
				h2.docs-title Directory Structure

				pre.directory-structure.
					│
					├── docs - <i>arquivos compilados</i>
					│         ├── css
					│         ├── images
					│         └── js
					└── src - <i>Arquivos de origem de layout e estilo</i>
					          ├── pug - <i>Fonte de layout</i>
					          └── sass - <i>Fonte de estilo</i>

				h2.docs-title#Compilation-of-source-files Compilação de arquivos de origem

				p O tema é construído usando SASS e PugJs, que são compilados em HTML e CSS pelo Grunt. Se você não estiver familiarizado com o Grunt, aqui está um artigo para começar. Se você está familiarizado com o Grunt, siga as instruções mencionadas abaixo para editar ou personalizar o código-fonte.

				p Se você não quiser editar o tema, poderá usar os arquivos compilados diretamente dentro da pasta #[code docs].

				p Execute o comando #[code npm install] no diretório raiz do projeto para instalar e construir as dependências.

				p Use a tarefa #[code npm run dev] para editar e compilar arquivos de origem em tempo real ou use a tarefa npm run build para compilar todos os arquivos de origem de uma só vez.

				h2.docs-title#Layout-Customization Personalização de layout

				p O layout é construído usando PugJs. Todos os arquivos de origem do layout estão localizados no diretório #[code src/pug]. Existem dois subdiretórios dentro deste diretório:

					ol
						li #[code layout] - Inclui o layout de estrutura HTML comum que é estendido por todas as páginas
						li #[code includes] - Inclui partes do layout, como barra lateral, barra de navegação e rodapé

				h2.docs-title#Style-Customization Personalização de estilo
				p Os estilos são escritos em SASS. Todos os arquivos de estilo estão localizados no diretório #[code src/sass]. Há um arquivo neste diretório main.sass que importa todos os arquivos e é exportado como main.css. Existem quatro subdiretórios dentro deste diretório:

					ol
						li #[code 1-tools] - Inclui estilos de todas as bibliotecas externas e um arquivo #[code _var.scss] que contém as variáveis necessárias para o aplicativo
						li #[code 2-basics] - Contém o estilo básico, como CSS de estrutura geral e opções de tema
						li #[code 3-component] - Contém os estilos para os componentes como cartão, widgets, barra lateral, barra de navegação, etc.
						li #[code 4-pages] - Contém os estilos para páginas específicas, como página de login e página de tela de bloqueio
				
				p Para personalizar a cor primária do tema e da barra lateral, você precisa alterar as variáveis no diretório #[code 1-tools/_var.scss]. A documentação detalhada sobre como alterar as cores é mencionada no próprio arquivo.

				p Se você não quiser usar um componente ou plug-in específico, basta comentar a instrução de importação para aquele componente específico em #[code src/sass/main.scss] e compilar o SASS executando o comando #[code npm run build].

				h2.docs-title#Compatibility-with-other-frameworks Compatibilidade com outros frameworks

				p Este tema não foi criado para um framework ou tecnologia específica, como Angular ou React. Mas devido à sua natureza modular, é muito fácil incorporá-lo a qualquer framework de front-end ou back-end como Angular, React ou VueJs ou Node JS. O CSS é modular o suficiente para ser incorporado em qualquer framework. Enquanto o Javascript usado para tornar os componentes interativos pode ser usado de qualquer um dos seguintes frameworks.

				p Se você estiver usando Angular, poderá usar o #[a(href="https://angular-ui.github.io/bootstrap/", rel="noopener") ui-bootstrap], para React use o #[a(href="https://react-bootstrap.github.io/", rel="noopener") React-Bootstrap] e para VueJs, você poderá usar o #[a(href="https://yuche.github.io/vue-strap/", rel="noopener") VueStrap].

				p Se você estiver usando o Node JS como seu servidor web, poderá usar o pug como seu mecanismo de layout para renderizar modelos HTML no estado em que estão, sem compilá-los para HTML. Mais detalhes estão disponíveis #[a(href="https://pugjs.org/api/express.html", target="_balnk") aqui].

				h2.docs-title#RTL-Support Suporte RTL

				p Para habilitar o suporte RTL:
					ul
						li Remover o comentário desta linha #[code @import '3-component/rtl';] em #[code src/sass/main.scss].
						li Adicionar o atributo #[code dir="rtl"] à tag #[code &lt;html&gt;] em #[code src/pug/layouts/_layout.pug].
						li Compilar os arquivos de origem usando o comando #[code npm run build].

				h2.docs-title#Contribution-and-Issues Contribuição e problemas
				p Se você gostou do template, dê uma estrela e faça um fork no #[a(href="https://github.com/alexjesustech/ocellaris-dash/fork", target="_blank", rel="noopener") GitHub]. Se você encontrar algo faltando ou quiser contribuir para esta documentação, o código-fonte está disponível em #[code src/pug/docs.pug]. Se você tiver um problema ou solicitação de recurso em relação ao tema, informe-o #[a(href="https://github.com/alexjesustech/ocellaris-dash/issues/new", target="_blank", rel="noopener") aqui]
